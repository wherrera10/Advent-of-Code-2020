available, processes = open("input.txt") do f
    raw = [line for line in eachline(f)]
    parseable = map(x -> replace(x, " " => ", "), raw)
    available = eval(Meta.parse(parseable[1]))
    processes = map(x -> eval(Meta.parse(x)), parseable[2:end])
    available, collect(enumerate(processes))
end
# processes = [(PID, [alloc, max]), ...]

println(processes)

output = Int64[]
work_to_do = true
while work_to_do
    work_to_do = false

    for p in processes
        if all((p[2][4:end] - p[2][1:3]) .<= available)
            push!(output, p[1])
            available += p[2][1:3]
            p[2][4:end] .= typemax(Int)
            work_to_do = true
        end
    end
end

if length(output) != length(processes)
    println("Failed to complete the Algorithm.")
end
println(mapreduce(x -> "P" * string(x-1), (l, r) -> l * ", " * r, output))
