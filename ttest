import Base.iterate, Base.eltype, Base.IteratorSize

struct Pow2NumberWithLeading
    leading::Vector{Int}
    len::Int
    function Pow2NumberWithLeading(i::Int)
        d = reverse(digits(i))
        return new(d, length(d))
    end
end

function iterate(p::Pow2NumberWithLeading, i::BigInt=big"0")
    d = reverse(digits(2i + 1))
    while length(d) < p.len || p.leading != d[1:p.len]
        i = nextpow(BigInt(2), foldl((x, y) -> BigInt(10)x + y, d) + 1)
        d = reverse(digits(i + 1))
    end
    return i, i
end

IteratorSize(Pow2NumberWithLeading) = Base.IsInfinite

IteratorEltype(Pow2NumberWithLeading) = Base.HasEltype()

eltype(Pow2NumberWithLeading) = Pow2NumberWithLeading

for i in Iterators.take(Pow2NumberWithLeading(12), 10)
    println(i, "  ", Int(round(log(2, i))))
end

