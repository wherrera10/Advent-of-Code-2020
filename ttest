#=
=={{header|Julia}}==
Note that the evalpoly function used in the code was added in Julia 1.4
<lang julia>
=#
using Primes

function iscircularprime(n)
    if isprime(n)
        dig, ten = digits(n), zero(n) + 10
        for i in 1:length(dig)-1
            m = evalpoly(ten, circshift(dig, i))
            (m < n || !isprime(m)) && return false
        end
        return true
    end
    return false
end

function findcircular(N)
    i, circprimeseq = 2, Int[]
    while length(circprimeseq) < N
        if iscircularprime(i)
            push!(circprimeseq, i)
        end
        i += 1
    end
    return circprimeseq
end

function next4circularprimes()
    count = 0
    for i in 6:100000
        if isprime(evalpoly(BigInt(10), ones(Int, i)))
            print("R($i) ")
            (count += 1) >= 4 && return
        end
    end
end

println("The first 19 circular primes are:\n", findcircular(19))
print("\nThe next 4 circular primes, in repunit format, are: ")
next4circularprimes()
println("\n\nChecking larger repunits:")
for i in [5003, 9887, 15073, 25031, 35317, 49081]
    println("R($i) is ", isprime(evalpoly(BigInt(10), ones(Int, i))) ? "prime." : "not prime.")
end
#=
</lang>{{out}}
<pre>
The first 19 circular primes are:
[2, 3, 5, 7, 11, 13, 17, 37, 79, 113, 197, 199, 337, 1193, 3779, 11939, 19937, 193939, 199933]

The next 4 circular primes, in repunit format, are: R(19) R(23) R(317) R(1031)

Checking larger repunits:
R(5003) is not prime.
R(9887) is not prime.
R(15073) is not prime.
R(25031) is not prime.
R(35317) is not prime.

</pre>
=#
