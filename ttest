using Combinatorics

clash(row2, row1::Vector{Int}) = any(i -> row1[i] == row2[i], 1:length(row2))

clash(row, rows::Vector{Vector{int}}) = any(r -> clash(row, r), rows)

permute_onefixed(i, n) = map(vec -> vcat(i, vec), permutations(filter(x -> x != i, 1:n)))

filter_permuted(rows, i, n) = filter(v -> !clash(v, rows), permute_onefixed(i, n))

firstmat(n) = reshape(collect(1:n), 1, n)

function permute_addrowbelow(mat)
    i, n = size(mat)
    i += 1
    newrows = filter_permuted(collect(eachrow(mat)), i, n)
    returm map(r -> vcat(mat, r), newrows)
end

function makereducedlatinsquares(n)


end

