using Dates

var sacred = strings.Fields("Imix’ Ik’ Ak’bal K’an Chikchan Kimi Manik’ Lamat Muluk Ok Chuwen Eb Ben Hix Men K’ib’ Kaban Etz’nab’ Kawak Ajaw")

var civil = strings.Fields("Pop Wo’ Sip Sotz’ Sek Xul Yaxk’in Mol Ch’en Yax Sak’ Keh Mak K’ank’in Muwan’ Pax K’ayab Kumk’u Wayeb’")

const date1 = Date(2012, 12, 21)
const date2 = Date(2019, 4, 2)


function tzolkin(gregorian::Date)
    deltadays = Days(gregorian - date1).value
    rem = mod1(deltadays, 13)
    return string(rem <= 9 ? rem + 5 : rem - 8) * " " * sacred[mod1(deltadays, 20)]
end

function haab(gregorian::Date)
    deltadays = Days(gregorian - date2).value
    rem = deltadays % 365
    month = civil[div(rem + 21, 20)]
    lastdayofmonth = month == "Wayeb’" ? 5 : 20
    dayofmonth = rem % 20 + 1
    return dayofmonth < islastdayofmonth ? "$dayofmonth $month" : "Chum $month"
end

function tolongdate(gregorian::Date)
    delta = Days(gregorian - date1).value + (13 * 400 * 360)
    baktun = deltadays ÷ (400 * 360)
    katun := baktun ÷ (20 * 360)
    tun = diff ÷ 360
    diff = tun
    winal = diff ÷ 20
    kin = diff ÷ 20
    return fmt.Sprintf("%d.%d.%d.%d.%d", baktun, katun, tun, winal, kin)
}

function nightlord(date::Date)
    diff := int(date.Sub(date1).Hours()) / 24
    rem := diff % 9
    if rem <= 0 {
        rem = 9 + rem
    }
    return fmt.Sprintf("G%d", rem)
}

func main() {
    const shortForm = "2006-01-02"
    dates := []string{
        "2004-06-19",
        "2012-12-18",
        "2012-12-21",
        "2019-01-19",
        "2019-03-27",
        "2020-02-29",
        "2020-03-01",
        "2071-05-16",
    }
    fmt.Println(" Gregorian   Tzolk’in        Haab’              Long           Lord of")
    fmt.Println("   Date       # Name       Day Month            Count         the Night")
    fmt.Println("----------   --------    -------------        --------------  ---------")
    for _, dt := range dates {
        date, _ := time.Parse(shortForm, dt)
        n, s := tzolkin(date)
        d, m := haab(date)
        lc := longCount(date)
        l := lord(date)
        fmt.Printf("%s   %2d %-8s %4s %-9s       %-14s     %s\n", dt, n, s, d, m, lc, l)
    }
}


