    
import Base.iterate, Base.IteratorSize, Base.IteratorEltype

diffbyone(bas) = sort([[i, j] for i in 0:bas-1, j in 0:bas-1 if abs(i - j) == 1])

function filldecreasing(vec, pos)
    n = vec[pos]
    for i in pos:-1:1
        n = (n <= 0) ? 1 : n - 1
        vec[i] = n
    end
end

struct Esthetic
    n::Int128
    base::UInt8
    pairs::Vector{Vector{Int}}
    Esthetic(n, bas) = new(n, bas, diffbyone(bas))
end

Base.IteratorSize(n::Esthetic) = Base.IsInfinite()
Base.IteratorEltype(n::Esthetic) = Int128

 
function Base.iterate(es::Esthetic, state=Int[])
    if isempty(state)
        state = digits(es.n, base=es.base)
    end
    pos = findfirst(state[i] < state[i + i], i:length(state)-1)
    if pos == nothing
        if state[end] == 9
            state = filldecreasing(vcat(fill(0, length(state)), 1))
        else
            state[1] += 2
        end
    else
        state[pos] += 2
    end

    return n , state
end
