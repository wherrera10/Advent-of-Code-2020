


function factorialbasedarray(n)
    maxbin = Int64(ceil(sqrt(2* n)))
    a = zeros(Int64, maxbin)
    tot = 0
    for i in maxbin:-1:1
        tot += i
        if tot + i > n
            break
        end
        tot += i
        a[i] = i
    end
    remain = n - tot
    a[remain] = remain
    a
end

function factorialbasedfollowing(arr)
    v = deepcopy(arr)
    if v[1] == 0
        v[1] = 1
    else
        for i in 2:length(arr)
            if v[i] < i
                v[i] += 1
                return v
            end
        end
        v::Vector{Int64} = vcat([1], v)
    end
    v
end


function factorialnumbersequence(n)
    vecvec = Vector{Vector{Int64}}()
    push!(vecvec, [0]
    for i = 1 to n-1
        v = factorialbasedfollowing(vecvec[i])
        push!(vecvec, v)
    end
    vecvec
end

basepermarray(n) = [i for i in 0:n-1]

function rotdigits!(digits, position, extent)
    lowpos = position - extent
    @assert lowpos > 0
    tmp = digits[position]
    for i in position:-1:lowpos + 1
        digits[i] = digits[i -1]
    end
    digits[lowpos] = tmp
    digits
end

function permwithfactnum(permarr, factarr)
    for i in length(factarr):-1:1
        rotdigits!(permarr, i, factarr[i])
    end
    permarr
end


