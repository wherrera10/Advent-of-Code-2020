struct Polynomial{T}
    coef::Vector{T}
    varname::Char
end

Polynomial(arr::Vector{Number}) = Polynomial(arr, 'x')

struct Term
    coef::Int
    exp::Int
    varname::Char
end

const uniexp = [collect('\u2070':'\u2071'); collect('\u00b2':'\u00b3'); collect('\u2074':'\u2079')]
const unitoascii = Dict([[u => i-1 for (i, u) in enumerate(uniexp)]; ])

touniexp(n) = (dig = reverse(digits(n)); String([uniexp[d+1] for d in dig]))
supertoascii(chararr) = String([unitoascii[u] for u in chararr])
uniexptoascii(s) = "^(" * String([haskey(unitoascii, c) ? unitoascii[c] : c for c in s]) * ")"

function Term(s::String, varname)
    
end

function findterms(str, varname)

end

testcases = [
"x⁵ - 2x⁴ + 42x³ + 0x² + 40x + 1", 
"0e+0x⁰⁰⁷ + 00e-00x + 0x + .0x⁰⁵ - 0.x⁴ + 0×x³ + 0x⁻⁰ + 0/x + 0/x³ + 0x⁻⁵",
"1x⁵ - 2x⁴ + 42x³ + 40x + 1x⁰",
"+x⁺⁵ + -2x⁻⁻⁴ + 42x⁺⁺³ + +40x - -1",
"x^5 - 2x**4 + 42x^3 + 40x + 1",
"x↑5 - 2.00·x⁴ + 42.00·x³ + 40.00·x + 1",
"x⁻⁵ - 2⁄x⁴ + 42x⁻³ + 40/x + 1x⁻⁰",
"x⁵ - 2x⁴ + 42.000 000x³ + 40x + 1",
"x⁵ - 2x⁴ + 0,042x³ + 40.000,000x + 1",
"0x⁷ + 10x + 10x + x⁵ - 2x⁴ + 42x³ + 20x + 1",
"1E0x⁵ - 2,000,000.e-6x⁴ + 4.2⏨1x³ + .40e+2x + 1", # support: ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁻ ⁺ · × ⁄ ↑ ⏨.
"x⁵ - x⁴⁄2 + 405x³⁄4 + 403x⁄4 + 5⁄2", # support: ¼ ½ ¾ ⅐ ⅑ ⅒ ⅓ ⅔ ⅕ ⅖ ⅗ ⅘ ⅙ ⅚ ⅛ ⅜ ⅝ ⅞ ↉	
"x⁵ - ½x⁴ + 101¼x³ + 100¾x + 2½",
]


#=
Description	Input example test cases
"Zero" coefficients are removed	x⁵ - 2x⁴ + 42x³ + 0x² + 40x + 1
The "0" polynomial case	0e+0x⁰⁰⁷ + 00e-00x + 0x + .0x⁰⁵ - 0.x⁴ + 0×x³ + 0x⁻⁰ + 0/x + 0/x³ + 0x⁻⁵
"One" coefficients are normalised	1x⁵ - 2x⁴ + 42x³ + 40x + 1x⁰
Signs are normalised	+x⁺⁵ + -2x⁻⁻⁴ + 42x⁺⁺³ + +40x - -1
ASCII representations are parsed	x^5 - 2x**4 + 42x^3 + 40x + 1
Non-ASCII representations are parsed	x↑5 - 2.00·x⁴ + 42.00·x³ + 40.00·x + 1 (c.f. ↑ & ·)
Specifically permit non-polynomials where terms have negative exponents	x⁻⁵ - 2⁄x⁴ + 42x⁻³ + 40/x + 1x⁻⁰ (n.b. Unicode Fraction)
Spaces in numbers and between operators are ignored	x⁵ - 2x⁴ + 42.000 000x³ + 40x + 1
Single commas are ignored in numbers	x⁵ - 2x⁴ + 0,042x³ + 40.000,000x + 1
A coefficient may be duplicated, zero, or missing	0x⁷ + 10x + 10x + x⁵ - 2x⁴ + 42x³ + 20x + 1
Support Scientific notation and optionally
support Unicode Decimal Exponent Symbol U+23E8/⏨	1E0x⁵ - 2,000,000.e-6x⁴ + 4.2⏨1x³ + .40e+2x + 1
Unicode characters that must be specifically supported are:	⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁻ ⁺ · × ⁄ ↑ ⏨.
Where · & × are multiplication, and ⁄ is Unicode Fraction.
Support fractions for both input and output.	x⁵ - x⁴⁄2 + 405x³⁄4 + 403x⁄4 + 5⁄2
On output round the decimal to appropriate fraction.
Optionally support Unicode Vulgar fractions for both input and output.
¼ ½ ¾ ⅐ ⅑ ⅒ ⅓ ⅔ ⅕ ⅖ ⅗ ⅘ ⅙ ⅚ ⅛ ⅜ ⅝ ⅞ ↉	x⁵ - ½x⁴ + 101¼x³ + 100¾x + 2½
On output round the decimal to appropriate fraction.
=#
