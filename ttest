using Primes, Polynomials

const cyclotomics = Dict([1 => Poly([big"1", big"1"]), 2 => Poly([big"-1", big"1"])])

function divisors(n::Integer)
    f = [one(n)]
    for (p,e) in factor(n)
        f = reduce(vcat, [f*p^j for j in 1:e], init=f)
    end
    return sort!(f)[1:end-1]
end

"""
Formula at wikipedia article at botoom of section /wiki/Cyclotomic_polynomial#Fundamental_tools
"""
function cyclotomic(n::Integer)
    if haskey(cyclotomics, n)
        c = cyclotomics[n]
    elseif isprime(n)
        c = Poly(ones(BigInt, n - 1))
        cyclotomics[n] = c
    else  # recursive formula seen in wikipedia article
        c = Poly([big"-1"; zeros(BigInt, n - 2); big"1"])
        for d in divisors(n)
            c รท= cyclotomic(d)
        end
        cyclotomics[n] = c
    end
    return c
end

for i in 1:200
    println(rpad("$i:  ", 5), cyclotomic(BigInt(i)))
end
