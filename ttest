using Primes

function nsmooth(N, needed, startcount=1)
    nexts, smooths = [i for i in 2:N if isprime(i)], [1]
    prim, count = deepcopy(nexts), 1
    indices = ones(Int, length(nexts))
    while count < (startcount == 1 ? needed : needed + 1)
        x = minimum(nexts)
        push!(smooths, x)
        (x >= startcount) && (count += 1)
        for j in 1:length(nexts)
            (nexts[j] <= x) && (nexts[j] = prim[j] * smooths[(indices[j] += 1)])
        end
    end
    filter(x -> x >= startcount, smooths)
end

function testnsmoothfilters()
     for i in 1:29
        if isprime(i)
            println("The first 25 n-smooth numbers for n = $i are: ", nsmooth(i, 25))
        end
    end
    for i in filter(isprime, 3:29)
        println("Three ($i)-smooth numbers >= 3000 are: ", nsmooth(i, 3, 3000))
    end
    for i in filter(isprime, 503:521)
        println("Twenty ($i)-smooth numbers >= 30000 are: ", nsmooth(i, 20, 30000))
    end
end

testnsmoothfilters()

The first 25 n-smooth numbers for n = 2 are: [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216]
The first 25 n-smooth numbers for n = 3 are: [1, 2, 3, 4, 6, 8, 9, 12, 16, 18, 24, 27, 32, 36, 48, 54, 64, 72, 81, 96, 108, 128, 144, 162, 192]
The first 25 n-smooth numbers for n = 5 are: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 45, 48, 50, 54]
The first 25 n-smooth numbers for n = 7 are: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 25, 27, 28, 30, 32, 35, 36]
The first 25 n-smooth numbers for n = 11 are: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 27, 28, 30, 32]
The first 25 n-smooth numbers for n = 13 are: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28]
The first 25 n-smooth numbers for n = 17 are: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27]
The first 25 n-smooth numbers for n = 19 are: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26]
The first 25 n-smooth numbers for n = 23 are: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
The first 25 n-smooth numbers for n = 29 are: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
Three (3)-smooth numbers >= 3000 are: [3072, 3456, 3888]
Three (5)-smooth numbers >= 3000 are: [3000, 3072, 3125]
Three (7)-smooth numbers >= 3000 are: [3000, 3024, 3072]
Three (11)-smooth numbers >= 3000 are: [3000, 3024, 3025]
Three (13)-smooth numbers >= 3000 are: [3000, 3003, 3024]
Three (17)-smooth numbers >= 3000 are: [3000, 3003, 3024]
Three (19)-smooth numbers >= 3000 are: [3000, 3003, 3024]
Three (23)-smooth numbers >= 3000 are: [3000, 3003, 3024]
Three (29)-smooth numbers >= 3000 are: [3000, 3003, 3016]
Twenty (503)-smooth numbers >= 30000 are: [30000, 30003, 30005, 30008, 30012, 30014, 30015, 30016, 30020, 30024, 30030, 30033, 30039, 30044, 30046, 30048, 30049, 30051, 30056, 30057]
Twenty (509)-smooth numbers >= 30000 are: [30000, 30003, 30005, 30008, 30012, 30014, 30015, 30016, 30020, 30024, 30030, 30031, 30033, 30039, 30044, 30046, 30048, 30049, 30051, 30056]
Twenty (521)-smooth numbers >= 30000 are: [30000, 30003, 30005, 30008, 30012, 30014, 30015, 30016, 30020, 30024, 30030, 30031, 30033, 30039, 30044, 30046, 30048, 30049, 30051, 30056]






abstract struct AbstractColoredNode end

struct RedNode <: AbstractColoredNode end; const R = RedNode()
struct BlackNode <: AbstractColoredNode end; const B = BlackNode()

checkvec(v) = if length(v) != 4 throw(DomainError(v, "vector arg length != 4")) end

balance(B, v::Vector, z, d) = balance(v, z, d)

balance(v::Vector, z, d) = (checkvec(v); balance(v[1], v[2], v[3], v[4], z, d))

balance(v1::RedNode, v2::Vector, y, c, z, d) =
    (checkvec(v2); [R, [B, v2[2], v2[3], v2[4]], y, [B, c, z, d]])

balance(v1::RedNode, a, x, v2::Vector, z, d) =
    (checkvec(v2); [R, [B, a, x, v2[2]], v2[3], [B, v2[4], z, d]])

balance(b::BlackNode, a, x, v::Vector) = balance(a, x, v)

balance(a, x, v::Vector) = (checkvec(v); balance(a, x, v[1], v[2], v[3], v[4]))

balance(a, x, v1::RedNode, v2::Vector, z, d) =
    (checkvec(v2); [R, [B, a, x, v2[2]], v2[3], [B, v2[4], z, d]])

balance(a, x, v1::RedNode, b, y, v2::Vector) =
    (checkvec(v2); [R, [B, a, x, b], y, [B, v2[2], v2[3], v2[4]]])

balance(col, a, x, b) = [col, a, x, b]

function ins(x, s::Vector)
#function ins(x, s = [col, a, y, b])
    if x < y
        balance(col, ins(x, a), y, b)
    elseif x > y
        balance(col, a, y, ins(x, b))
    else
        [col, ins(x, a), y, b] #???
    end
end

ins(x, U) = [R, U, x, U]  # ???

insert(x, s) = vcat(B, ins(x,s)[1:3])

function testRB()
    t = Any()
    for i in 1:10
        insert(i, t)
    end
    println(t)
end
