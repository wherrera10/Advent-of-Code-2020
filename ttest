#=
UF UR UB UL DF DR DB DL FR FL BR BL UFR URB UBL ULF DRF DFL DLB DBR
UR UB UL UF DF DR DB DL FR FL BR BL URB UBL ULF UFR DRF DFL DLB DBR
UB UL UF UR DF DR DB DL FR FL BR BL UBL ULF UFR URB DRF DFL DLB DBR
UL UF UR UB DF DR DB DL FR FL BR BL ULF UFR URB UBL DRF DFL DLB DBR
LF UR UB UL RF DR DB DL FU FD BR BL LFU URB UBL LDF RUF RFD DLB DBR
DF UR UB UL UF DR DB DL FL FR BR BL DFL URB UBL DRF ULF UFR DLB DBR
RF UR UB UL LF DR DB DL FD FU BR BL RFD URB UBL RUF LDF LFU DLB DBR
UF FR UB UL DF BR DB DL DR FL UR BL FDR FRU UBL ULF BRD DFL DLB BUR
UF DR UB UL DF UR DB DL BR FL FR BL DBR DRF UBL ULF URB DFL DLB UFR
UF BR UB UL DF FR DB DL UR FL DR BL BUR BRD UBL ULF FRU DFL DLB FDR
UF UR UB UL DL DF DR DB FR FL BR BL UFR URB UBL ULF DFL DLB DBR DRF
UF UR UB UL DB DL DF DR FR FL BR BL UFR URB UBL ULF DLB DBR DRF DFL
UF UR UB UL DR DB DL DF FR FL BR BL UFR URB UBL ULF DBR DRF DFL DLB
UF UR RB UL DF DR LB DL FR FL BD BU UFR RDB RBU ULF DRF DFL LUB LBD
UF UR DB UL DF DR UB DL FR FL BL BR UFR DLB DBR ULF DRF DFL URB UBL
UF UR LB UL DF DR RB DL FR FL BU BD UFR LUB LBD ULF DRF DFL RDB RBU
UF UR UB BL DF DR DB FL FR UL BR DL UFR URB BDL BLU DRF FUL FLD DBR
UF UR UB DL DF DR DB UL FR BL BR FL UFR URB DFL DLB DRF UBL ULF DBR
UF UR UB FL DF DR DB BL FR DL BR UL UFR URB FUL FLD DRF BDL BLU DBR
LB UL UF UR DF DR RB DL FR FL BU BD LBD ULF UFR LUB DRF DFL RDB RBU
UR UB UL DL DF DR DB UF FR BL BR FL URB UBL DFL DLB DRF ULF UFR DBR
UL BR UR UB DF FR DB DL UF FL DR BL RUF BRD URB UBL LFU DFL DLB FDR
UF UR UB BL FL DF DR DB FR UL BR DL UFR URB BDL BLU FUL FLD DBR DRF
UF UR UB DL UL DF DR DB FR BL BR FL UFR URB DFL DLB UBL ULF DBR DRF
RF UR UB UL DB DL LF DR FD FU BR BL RFD URB UBL RUF DLB DBR LDF LFU
LF DR UB UL RF UR DB DL BR FD FU BL DBR RUF UBL LDF URB RFD DLB LFU
DF FL UB UL UF BR DB DL DR FR UR BL FUL FLD UBL DRF BRD UFR DLB BUR
UB UL UF UR DL DF DR DB FR FL BR BL UBL ULF UFR URB DFL DLB DBR DRF
UF DR UB BL DF UR DB FL BR UL FR DL DBR DRF BDL BLU URB FUL FLD UFR
UF UR UB BL DL DF DR FL FR UL BR DB UFR URB RDB BLU DFL FUL LBD DRF
DF UR UB UL DR DB DL UF FL FR BR BL DFL URB UBL DRF DBR ULF UFR DLB
UB UL UF FR DF BR DB DL DR FL UR BL UBL ULF FDR FRU BRD DFL DLB BUR
UR UB UL BL DF DR DB FL FR UF BR DL URB UBL BDL LFU DRF RUF FLD DBR
UL UF DR UB DF UR DB DL BR FL FR BL ULF DBR DRF UBL URB DFL DLB UFR
UL UF FR UB DF BR DB DL DR FL UR BL ULF FDR FRU UBL BRD DFL DLB BUR
RF UL UF UR LF DR DB DL FD BU BR BL RFD ULF UFR LUB LDF RBU DLB DBR
UB UL UF BR DF FR DB DL UR FL DR BL UBL ULF BUR BRD FRU DFL DLB FDR
DR UR UB UL LF DB DL RF FD FU BR BL RUF URB UBL DBR LDF LFU RFD DLB
DR UL UF UR UB DB DL DF FL FR BR BL DRF ULF UFR DBR URB UBL DFL DLB
UF FR UB BL DB DL DF FL DR UL UR BR FDR FRU DBR BLU DLB FUL URB DFL
UF BR UB UL DR DB DL FR UR FL DF BL BUR RFD UBL ULF DBR LDF FRU DLB
RD FR DB UL LF BL UB DL FD FU UR BR LUB FRU DBR RFD LDF LFU URB BDL
DF UR DB FR UF DR UB BR FL DL BL UL DFL DLB FDR FRU ULF BUR BRD UBL
UL UF DR LB DF UR RB DL BU FL FR BD ULF RBU DRF LBD LUB DFL RDB UFR
LF UR UB UL RB DR DB DL FR FD FU BL UFR RDB UBL LDF DRF RBU DLB LFU
UF BR UB DB DL DF FR UL UR BL DR FL BUR BRD DLB FDR DFL UBL ULF FRU
RF UR UB UL LB DR DB DL FD FL BR FU RFD URB LBD ULF LUB DFL RUF DBR
LF BU LB UL RU FR RB DL FU FD DR BD LFU BUR LBD LDF UBL RUF RDB FDR
DR UB UL BL DF UR DB FL BR UF FR DL DRF UBL BDL LFU URB RDB FLD UFR
UF BR LB BD DF FR RD FL UR UL BU DL BUR LUB DRF BDL FRU FUL FLD RDB
UL UF DB UB DF FR BR DL UR FL BL DR ULF DLB FDR UBL FRU DFL BUR BRD
UF UR RB BU DF DR LF BL FR DL BD UL UFR RDB FLD BUR DRF BDL BLU LFU
UF UR DB FL DR UB BL DF FR DL UL BR UFR BLU DBR FLD FUL DRF BDL URB
DF BR RD UL UF FL LB DL UR FR BD BU BUR LFU RDB DRF FLD UFR LUB LBD
LF UR UB UL DF DR DB RF FU LD BR BL LFU URB UBL BDL DRF RUF FLD DBR
RU LF BL FR BR DB FD LD DR FU UB LU LDF BLU FRU DBR LBD DRF ULF RBU
UF BD BL FL RB UB DR UL RF RU FD LD LDF LBD RUF FDR DBR LFU BUR LUB
DF FU DB BL LF LU DR UR FR LD BR UB DFL ULF UFR BRD LUB DRF BUR LBD
LU UB DR FR UF FL DL DF BD LB RU BR FUL BLU FRU DLB URB BRD RFD DFL
RF RB LU FD FU FL LD RD DB UR BL BU RFD RUF LDF LUB ULF URB LBD BRD
FL LU RU DL FU FR RD UB RB DB FD BL ULF RFD BDL FLD BUR FRU BRD BLU
LU FD FL FU DR BD UB LB RB DL UR FR LBD UFR RFD BLU BUR ULF FLD DBR
LB RB FU DF UB DB DL UR FR LF UL DR BDL UBL RUF FLD RDB ULF URB FDR
FD FL UF UL UR DB DR BU BR FR LB LD DLB UFR LUB FUL BUR DRF BRD LDF
UB UR UL DF DB LD RF BR LF RD BL UF BLU FDR BDL FUL RUF BRD DFL BUR
LF UB UF DF UR DB RB UL RD RF LB LD BDL BRD LDF UFR BUR UBL LFU RFD
DF FR UB BD FU BL RU BR RD DL LU LF DBR RUF BDL UBL RFD FLD BUR LFU
FU FR RU LU LD BL FL RB UB BD RD FD FDR FUL FRU BDL LUB RDB URB FLD
LD DF FR BR UF RU UB FL RD LB UL DB LDF BRD FRU LFU BDL RFD BUR LUB
BD BU RU DL DF BL FR FL LU DR BR UF LDF LBD URB FUL BRD RUF UBL RFD
FR LU BU DL BD UF UR BL FL FD BR DR RFD RUF BRD DFL LFU LBD UBL URB
LU FU RU DF LB RB DL BD LF RD RF BU BRD DFL RBU LUB DLB LFU FDR RUF
UB DF BD UF LB LF LU UR LD RD BR FR RBU LBD FDR UBL LFU DBR LDF RUF
RB UB RF LF UF RD BL DL RU DF DB LU RFD LFU LDF RUF UBL RDB LBD URB
FR LB FD FU DR BR LU BD UR BU LF LD LUB LFU BDL DBR DRF RBU FLD RUF
UL DL RF UB FD BR DB UF DR UR BL FL FDR BLU DLB URB RUF FLD BRD FUL
RU BU FL RD BD FR LU FD FU DL BL RB RUF DFL UBL ULF URB BDL DBR FDR
RF DL BL LF DB BR FD BU RD FU RU LU URB LUB RFD DFL FRU BDL DBR ULF
RU FL FR FU DL RD UB BD UL FD BL RB BDL BRD UFR FDR BLU RBU FLD LFU
RF FU BU FL UL LD RB DB BL FD RU RD BRD RUF DLB UBL DFL LFU URB FDR
FR RU UF LF BD LU BU DL RB FD LB DR FLD RUF BLU RFD DBR LFU LBD BUR
FL RD BR UB UR DF BL UL FU BD DL RF ULF UBL FRU URB DRF BRD FLD DLB
BR LU UB BL FR RD FL FD BD UF UR DL DBR BUR FLD LUB RFD FRU ULF BDL
UL DF LB RU BR UF BD LD LF BU DR FR FRU BUR LDF DRF UBL RDB BDL ULF
UB FR LU RD RU UF LF RB LB DF LD BD RFD BDL ULF LUB LDF BUR RUF BRD
BR FD UF LB UL UB RF DR FL RU LD BD UBL ULF RUF FLD BDL RDB BUR DRF
RU FR LB DL BD DF LF BR UF UL DR UB DFL BLU BRD UFR LBD ULF FDR RBU
LD LU DF LB UR FL DR BR FR UF UB BD DFL DRF LUB LFU DLB RUF DBR RBU
LB DB RU DF LU BU RF RB UF RD DL LF DLB LFU FLD RDB FDR BLU BUR UFR
DR DB BU DL BL DF BR FL UL UR FR FU ULF UFR DBR DFL BLU BUR BDL RFD
DB DL DF UF UB FR LB DR UL LF UR BR DRF LDF UFR BRD DLB RBU UBL FUL
BL DF UL RB BD UR UB FL LD DR RF UF URB LBD LFU RFD BRD BLU FRU DFL
UL DR BU BL DF LD BR DB LF RF FU RU BLU URB LBD FDR DFL DBR LFU FRU
UR BL DB RB FL UB DL UF DF RF RD LU DFL BLU FDR LBD BUR UFR LFU RDB
DL LU FU BD RD FR RB BL FD UR FL UB BDL FLD ULF RBU FRU RDB BLU RFD
UB FU LU DL RB DB LB RF FD RU LF DR FRU DRF BLU BUR BRD DLB FLD ULF
UR FU DL UL BL LF FD UB RB FR DR DB UFR BLU BUR FLD DLB LFU RFD DBR
RB UF DF FR DL DR UL UR UB BL FL BD FLD RDB BLU BUR RUF RFD LBD FUL
BD LU UB DL DR BL RF DF BR UF LF UR FLD LUB RUF LBD RDB ULF DRF RBU
RU LF RD RF FU UL BD DF RB LB BU LD LBD URB LUB DRF ULF FLD RDB UFR


=#

#=**********************************************************************
 *
 * A cube 'state' is a vector<int> with 40 entries, the first 20
 * are a permutation of {0,...,19} and describe which cubie is at
 * a certain position (regarding the input ordering). The first
 * twelve are for edges, the last eight for corners.
 *
 * The last 20 entries are for the orientations, each describing
 * how often the cubie at a certain position has been turned
 * counterclockwise away from the correct orientation. Again the
 * first twelve are edges, the last eight are corners. The values
 * are 0 or 1 for edges and 0, 1 or 2 for corners.
 *
 *********************************************************************=#

const applicablemoves = [0, 262143, 259263, 74943, 74898]

const affectedcubies = [
0 1 2 3 0 1 2 3;   # U
4 7 6 5 4 5 6 7;   # D
0 9 4 8 0 3 5 4;   # F
2 10 6 11 2 1 7 6; # B
3 11 7 9 3 2 6 5;  # L
1 8 5 10 1 0 4 7]  # R

function applymove!(move, state)
    state2, oldstate2 = deepcopy(state), zeros(Int, length(state))
    face, turns = divrem(move, 3) .+ 1
    for i in turns:-1:1
        oldstate2 .= state2
        for i in 1:8
            iscorner = i > 4
            target = affectedcubies[face, i] + iscorner * 12 + 1
            temp = ((i-1) & 3) == 3 ? i - 3 : i + 1
            killer = affectedcubies[face, temp] + iscorner * 12 + 1
            orientationdelta = i < 5 ? Int(face in [2, 3]) : face < 2 ? 0 : 2 - ((i-1) & 1)
            state2[target] = oldstate2[killer]
            state2[target + 20] = oldstate2[killer + 20] + orientationdelta
            (turns == 1) && (state2[target + 20] %= 2 + iscorner)
        end
    end
    return state2
end

inverse(move) = move + 2 - 2 * (move % 3)

function id(state::Vector{Int}, phase::Int)
    #--- Phase 1: Edge orientations.
    if phase < 2
        return state[21:32]
    elseif phase < 3
    #-- Phase 2: Corner orientations, E slice edges.
        result =  state[32:40]
        for e in 1:12
            result[1] = result[1] != 0 ? result[1] : (state[e] รท 8) << e
        end
        return result
    elseif phase < 4
    #--- Phase 3: Edge slices M and S, corner tetrads, overall parity.
        result = zeros(Int, 3)
        for e in 1:12
            temp  =  state[e] > 7 ? 2 : (state[e] & 1) << (2 * e)
            result[1] = result[1] != 0 ? result[1] : temp
        end
        for c in 1:8
            temp = ((state[c + 12 + 1] - 12) & 5) << (3 * c)
            result[2] = result[2] != 0 ? result[2] : temp
        end
        for i in 13:18, j in i+1:20
            result[3] โป= Int(state[i] > state[j])
        end
        return result
    end
    #--- Phase 4: The rest.
    return state
end

function pochmann(fname)
    starttime = time() * 1000
    aggregatemoves = 0
    #--- Define the goal.
    goal = ["UF", "UR", "UB", "UL", "DF", "DR", "DB", "DL", "FR", "FL", "BR", "BL",
        "UFR", "URB", "UBL", "ULF", "DRF", "DFL", "DLB", "DBR"]

    #--- Load dataset (file name should be passed as a command line argument).
    file = read(fname, String)
    linecount = 0
    for line in split(strip(file), "\n")
        inputs = split(line)
        linecount += 1
        totalmoves = 0

        #--- Prepare current (start) and goal state.
        state, goalstate, phase = zeros(Int, 40), zeros(Int, 40), 0
        for i in 1:20
            #--- Goal state.
            goalstate[i] = i - 1

            #--- Current (start) state.
            cubie = inputs[i]
            while true
                state[i] = something(findfirst(x -> x == cubie, goal), 21) - 1
                (state[i] != 20) && break
                cubie = cubie[2:end] * cubie[1]
                state[i + 20] += 1
            end
        end
        #--- Dance the funky Thistlethwaite...
    @label nextphase
        while (phase +=1) < 5
            #--- Compute ids for current and goal state, skip phase if equal.
            currentid = id(state, phase)
            goalid = id(goalstate, phase)
            (currentid == goalid) && continue

            #--- Initialize the BFS queue.
            q = [state, goalstate]

            #--- Initialize the BFS tables.
            predecessor = Dict{Vector{Int}, Vector{Int}}()
            direction = Dict{Vector{Int}, Int}()
            lastmove = Dict{Vector{Int}, Int}()
            direction[currentid] = 1
            direction[goalid] = 2

            #--- Dance the funky bidirectional BFS...
            while true
                #--- Get state from queue, compute its ID and get its direction.
                oldstate = popfirst!(q)
                oldid = id(oldstate, phase)
                olddir = get!(direction, oldid, 0)

                #--- Apply all applicable moves to it and handle the new state.
                move = 0
                while move < 18
                    if applicablemoves[phase] & (1 << UInt(move)) != 0
                        #--- Apply the move.
                        newstate = applymove!(move, oldstate)
                        newid = id(newstate, phase)
                        newdir = get!(direction, newid, 0)

                        #--- Have we seen this state (id) from the other direction already?
                        #--- I.e. have we found a connection?
                        if (newdir != 0) && (newdir != olddir)
                            #--- Make oldid represent the forwards
                            #--- and newid the backwards search state.
                            if olddir > 1
                                newid, oldid = oldid, newid
                                move = inverse(move)
                            end

                            #--- Reconstruct the connecting algorithm.
                            algorithm = [move]
                            while oldid != currentid
                                pushfirst!(algorithm, lastmove[oldid])
                                oldid = predecessor[oldid]
                            end
                            while newid != goalid
                                push!(algorithm, inverse(lastmove[newid]))
                                newid = predecessor(newid)
                            end

                            #--- Print and apply the algorithm.
                            for i in 1:length(algorithm)
                                print("UDFBLR"[algorithm[i] รท 3 + 1])
                                print(algorithm[i] % 3 + 1)
                                print(" ")
                                totalmoves += 1
                                state = applymove!(algorithm[i], state)
                            end

                            #--- Jump to the next phase.
                            @goto nextphase
                        end

                        #--- If we've never seen this state (id) before, visit it.
                        if newdir == 0
                            push!(q, newstate)
                            direction[newid] = olddir
                            lastmove[newid] = move
                            predecessor[newid] = oldid
                        end
                    end
                    move += 1
                end
            end
        end
        println(" (moves $totalmoves)")
        aggregatemoves += totalmoves
    end
    elapsedtime = time() * 1000 - starttime
    println("\nAverage number of moves = $(aggregatemoves / linecount)")
    println("\nAverage time = $(elapsedtime / linecount) milliseconds")
end

pochmann("rubikdata.txt")
