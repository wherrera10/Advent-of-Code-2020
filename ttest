using GeometryBasics

side(x1, y1, x2, y2, x, y) = (y2 - y1) * (x - x1) + (-x2 + x1) * (y - y1)

function iswithin(x1, y1, x2, y2, x3, y3, x, y)
    s1 = side(x1, y1, x2, y2, x, y)
    s2 = side(x2, y2, x3, y3, x, y)
    s3 = side(x3, y3, x1, y1, x, y)
    ((s1 ≈ 0 || s1 < 0)  && (s2 ≈ 0 || s2 < 0) && (s3 ≈ 0 || s3 < 0)) && return true
    ((s1 ≈ 0 || s1 > 0)  && (s2 ≈ 0 || s2 > 0) && (s3 ≈ 0 || s3 > 0)) && return true
    return false
end

var pts = [ [0, 0], [0, 1], [3, 1]]
var tri = [ [3/2, 12/5], [51/10, -31/10], [-19/5, 1.2] ]
System.print("Triangle is %(tri)")
var x1 = tri[0][0]
var y1 = tri[0][1]
var x2 = tri[1][0]
var y2 = tri[1][1]
var x3 = tri[2][0]
var y3 = tri[2][1]
 
for (pt in pts) {
    var x = pt[0]
    var y = pt[1]
    var within = accuratePointInTriangle.call(x1, y1, x2, y2, x3, y3, x, y)
    System.print("Point %(pt) is within triangle ? %(within)")
}
System.print()
tri = [ [1/10, 1/9], [100/8, 100/3], [100/4, 100/9] ]
System.print("Triangle is %(tri)")
x1 = tri[0][0]
y1 = tri[0][1]
x2 = tri[1][0]
y2 = tri[1][1]
x3 = tri[2][0]
y3 = tri[2][1]
var x = x1 + (3/7)*(x2 - x1)
var y = y1 + (3/7)*(y2 - y1)
var pt = [x, y]
var within = accuratePointInTriangle.call(x1, y1, x2, y2, x3, y3, x, y)
System.print("Point %(pt) is within triangle ? %(within)")
System.print()
tri = [ [1/10, 1/9], [100/8, 100/3], [-100/8, 100/6] ]
System.print("Triangle is %(tri)")
x3 = tri[2][0]
y3 = tri[2][1]
within = accuratePointInTriangle.call(x1, y1, x2, y2, x3, y3, x, y)
System.print("Point %(pt) is within triangle ? %(within)")
