using LightXML

struct XMLValidationError{T<:AbstractString} <: LightXML.XMLError
    msg::T
end

const Xptr= LightXML.Xptr

"""
An XML Schema Document, produced by an XML document that is XML for the schema.
"""
mutable struct XMLSchema <: AbstractXMLNode
    doc::XMLDocument
    schema::Xptr
end

function XMLSchema(doc::XMLDocument)
    schema = ccall((:xmlSchemaParse, LightXML.libxml2), Xptr, (Xptr,), doc.ptr)
    schema != C_NULL || throw(LightXML.XMLNoRootError())
    return new(doc, schema)
end


function validateswith(xml::XMLDocument, schema::XMLSchema, throwerrors=false)
    err = ccall((:XMLSchemaValidateDocuments, LightXML.libxml2), Cint, (Xptr, Xptr), xsd.ptr, xml.ptr)
        if err
        if throwerrors
           y = ""
           throw(XMLValidationError(y))
        end
        return false
    end
    return true
end



function testXML(schema::XMLSchema, xmlfile)
    xml = parse_file(xmlfile)
    err = validatewith(schema, xml)
end


xdoc = parse_file("shiporder.xml")
println("parsed:\n$xdoc")
xsddoc = parse_file("shiporder.xsd")
println("parsed:\n$xsddoc")
dump(xsddoc)
sch = XMLSchema(xsddoc)
println("xsd: $sch")

