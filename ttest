#=
The weather routing problem has the following parts:

a predicted surface wind direction and speed, at increments of longitude, latitude, and time
an expected surface current direction and speed, at increments of longitude, latitude, and time
'polar data' describing maximum speed of a sailboat at points of sail for a given speed of wind over water
regions for sailing (the open ocean) and not (the land, shallows, restricted areas, etc.)
a starting location and time, and a destination
Given the above information and a specific path, progress and arrival time are determined.
The weather routing problem, conversely, is to determine the path which results in the earliest arrival time.
=#

using DelimitedFiles, JuMP

function getpolardata(filename)
    datacells, headercells = readdlm(filename, ';', header=true)
    winds = map(x -> parse(Float32, x), headercells[2:end])
    degrees = datacells[:, 1]
    speeds = datacells[:, 2:end]
    return winds, degrees, speeds  # speeds indexed by [wind degrees, windspeed knots]
end

const R = 6372800  # earth approximate radius in meters
const filename = "polar.csv"
const winds, degrees, speeds = getpolardata(filename)

deg2rad(deg) = (deg * π / 180.0 + 2π) % 2π 
rad2deg(rad) = (rad * (180.0 / π) + 360.0) % 360.0
cartesian2polar(x, y) = sqrt(x * x + y * y), atand(x, y)
polar2cartesian(r, deg) = r .* sincosd(deg)

function haversine(lon1, lat1, lon2, lat2)
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sind(dlat / 2)^2 + cosd(lat1) * cosd(lat2) * sind(dlon / 2)^2
    c = 2.0 * asind(sqrt(a))
    theta = atand(sind(dlon) * cosd(lat2), 
        cosd(lat1) * sind(lat2) - sind(lat1) * cosd(lat2) * cosd(dlon))
    theta = (theta + 360) % 360
    return R * c * 0.5399565, theta
end

function inverse_haversine(lon1, lat2, distance, direction)
    lat2 = asind(sind(lat1) * cos(distance / R) + cosd(lat1) * sin(d / R) * cosd(direction)
    lon2 = lon1 + atand(sind(direction) * sin(distance / R) * cosd(lat1), 
                       cos(distance / R) - sind(lat1) * sind(lat2))
    return lon2, lat2
end

knots2meterspersecond(knots) = knots * 0.514444444
meterpersecond2knots(mps) =  mps * 1.94384449

struct SailingParameters
    winddeg::Float32
    windkts::Float32
    currentdeg::Float32
    currentkts::Float32
end

function sailingparameters(seatime, longitude, latitude)

end

function bestboatspeed(pointofsail, windspeed)
    udeg = findlast(t -> t <= pointofsail, degrees)
    odeg = findfirst(t -> t >= pointofsail, degrees)
    uvel = findlast(t -> t <= windspeed, winds)
    ovel = findfirst(t -> t >= windspeed, winds)
    if any(t -> t == nothing, [udeg, odeg, uvel, ovel])
        return -1.0
    end
    frac = (odeg == udeg && uvel == ovel) ? 1.0 :
            (odeg == udeg) ? (windspeed - winds[uvel]) / (winds[ovel] - winds[uvel]) :
            (uvel == ovel) ? (pointofsail - degrees[udeg]) / (degrees[odeg] - degrees[udeg]) :
            ((pointofsail - degrees[udeg]) / (degrees[odeg] - degrees[udeg]) +
            (windspeed - winds[uvel]) / (winds[ovel] - winds[uvel])) / 2
    return speeds[udeg, uvel] + frac * (speeds[odeg, ovel] - speeds[udeg, uvel])
end

sailingspeed(azimuth, dir, ws) = bestboatspeed(dir, ws) * cosd(abs(dir - azimuth))

function boatvector(dirtravel, dirwind, windspeed, dircur, velcur)
    pointofsail = (dirtravel - dirwind) % 360.0
    pointofsail = pointofsail < 0 ? pointofsail + 360.0 : pointofsail
    pointofsail = if pointofsail > 180.0 ? 360.0 - pointofsail : pointofsail
    VMG = bestboatspeed(pointofsail, windspeed)
    other, idx = findmax([sailingspeed(pointofsail, x, windspeed) for x in degrees])
    if other > VMG
        pointofsail = degrees[idx]
        VMG = other
    end
    dirchosen = deg2rad(dirwind + pointofsail)
    wx, wy = VMG * sin(dirchosen), VMG * cos(dirchosen)
    curx, cury = velcur * sin(deg2rad(dircur)), velcur * cos(deg2rad(dircur))
    return rad2deg(atan(wy + cury, wx + curx)), sqrt((wx + curx)^2 + (wy + cury)^2)
end

function sailsegment(seatime, duration, curlong, curlat, destlong, destlat)
    dir = haversine(curlong, curlat, destlong, destlat)[2]
    p = sailingparameters(seatime, curlong, curlat)
    dir2, distance = boatvector(dir, p.winddeg, p.windkts, p.currentdeg, p.currentkts)
    lon2, lat2 = inverse_haversine(lon1, lat1, distance, dir2)
end


@show bestboatspeed(90, 19.0)
@show bestboatspeed(95, 19.0)
@show bestboatspeed(100, 19.0)


