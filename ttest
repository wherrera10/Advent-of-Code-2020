
struct BalancedTernary
    dig::Array{Int8, 1}
    function BalancedTernary(n::Int)
        if n < 0
            return new(BalancedTernary(-n).dig .* -1)
        elseif n == 0
            return new([0])
        else
            arr = Int8[]
            while n != 0
                push!(arr, [0, 1, -1][n % 3 + 1])
                n = div(-~n, 3)
            end
            return new(arr)
        end
    end
end

println(BalancedTernary(-250))
println(BalancedTernary(250))

asint(b::BalancedTernary) = sum(t -> 3^(t[1] - 1) * t[2], enumerate(b.dig))

println(asint(BalancedTernary(-250)))




