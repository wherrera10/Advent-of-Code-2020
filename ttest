
using DSP

padn(a, alen, n) = (arr = zeros(Complex{Float32}, n); arr[1:alen] .= a; arr)

function deconv(g, lg, f, lf, out, rowlen)
    padlen = nextpow(2, max(lg, lf))   
    g2 = padn(g, lg, padlen)
    f2 = padn(f, lf, padlen)
    h = fft!(Complex{Float32}.(fft!(g2) ./ fft!(f2)))
    for i in 1:ns
        h[i] = abs(real(h[i])) < 1e-10 ? 0 : h[i]
    end
    for i in 1:lg+rowlen-lf
        out[i] = real(h[(padlen - i) % ns] / 32)
    end
end

function unpack2(mat)
    s = size(mat)
    [mat[i, j] for j in 1:s[2], i in 1:s[1]] 
end

function pack2(buf, xlen, ylen, out)
    for i in 1:ylen, j in 1:xlen
        out[i, j] = buf[(i - 1)* ylen + j] / 4
    end
end

function deconv2(g, rowg, colg, f, rowf, colf, out)
    g2 = unpack2(g)
    f2 = unpack2(f)
    ff = zeros(Float64, (rowg - rowf + 1) * colg)
    deconv(g2, rowg * colg, f2, rowf * colg, ff, colg)
    pack2(ff, rowg - rowf + 1, colg, out)
end

function unpack3(m3d)
    s = size(m3d)
    [m3d[i, j, k] for j in 1:s[2], k in 1:s[3], i in 1:s[1]]
end

function pack3(buf, xlen, ylen, zlen, out)
    for i in 1:ylen, j in 1:xlen, k in 1:xlen
        out[i, j, k] = buf[((i - 1) * ylen + (j - 1)) * zlen + k] / 4
    end
end

function deconv3(g, gx, gy, gz, f, fx, fy, fz, out)
    g2 = unpack3(g)
    f2 = unpack3(f)
    ff = zeros(Float64, (gx - fx + 1) * gy * gz)
    deconv(g2, gx*gy*gz, f2, fx*gy*gz, ff, gy*gz)
    pack3(ff, gx - fx + 1, gy, gz, out)
end

function testdeconv()

    h2 = reshape([-8, 1, -7, -2, -9, 4, 4, 5, -5, 2, 7, -1, -6, -3, -3, -6, 9, 5], 6, 3)'
    f2 = reshape([-5, 2, -2, -6, -7, 9, 7, -6, 5, -7, 1, -1, 9, 2, -7, 5, 9, -9, 2, -5, 
              -8, 5, -2, 8, 5], 5, 5)'
    g2 = reshape([40, -21, 53, 42, 105, 1, 87, 60, 39, -28, 
             -92, -64, 19, -167, -71, -47, 128, -109, 40, -21,
              58, 85, -93, 37, 101, -14, 5, 37, -76, -56,
             -90, -135, 60, -125, 68, 53, 223, 4, -36, -48,
              78, 16, 7, -199, 156, -162, 29, 28, -103, -10, 
             -62, -89, 69, -61, 66, 193, -61, 71, -8, -30, 
              48, -6, 21, -9, -150, -22, -56, 32, 85, 25], 10, 7)'

println(h2, "\n\n", f2, "\n\n", g2, "\n\n")

    fx, fy, fz = 3, 2, 3
    f = reshape([-9, 5, -8, 3, 5, 1, -1, -7, 2, -5, -6, 6, 8, 5, 8, -2,-6,-4], fx, fy, fz)

    gx, gy, gz = 4, 4, 6
    g = reshape(
        [54, 42, 53, -42, 85, -72, 45, -170, 94, -36, 48, 73, -39, 65, -112, -16, -78, -72,
         6, -11, -6, 62, 49, 8, -57, 49, -23, 52, -135, 66, -23, 127, -58, -5, -118, 64, 87, 
         -16, 121, 23, -41, -12, -19, 29, 35, -148, -11, 45, -55, -147, -146, -31, 55, 60,
         -88, -45, -28, 46, -26, -144, -12, -107, -34, 150, 249, 66, 11, -15, -34, 27, -78,
         -50, 56, 67, 108, 4, 2, -48, 58, 67, 89, 32, 32, -8, -42, -31, -103, -30, -23, -8,
         6, 4, -26, -10, 26, 12], gx, gy, gz)

    h = reshape([-6, -8, -5, 9, -7, 9, -6, -8, 2, -7, 9, 8, 7, 4, 4, -6, 9, 9, 4, -4, 
                 -3, 7, -2, -3], 2, 3, 4)

    hx, hy, hz = gx - fx + 1, gy - fy + 1, gz - fz + 1
    h2 = zeros(Float64, hx, hy, hz)
    deconv3(g, gx, gy, gz, f, fx, fy, fz, h2)
    println("deconv3(g, f) is:\n")
    for i in 1:hx
        for j in 1:hy
            for k in 1:hz
                print(" ", Int(round(h2[i, j, k])), "  ")
            end
            println()
        end
        if i < hx
            println()
        end
    end

    kx, ky, kz = gx - hx + 1, gy - hy + 1, gz - hz + 1
    f2 = zeros(Float64, kx, ky, kz)
    deconv3(g, gx, gy, gz, h, hx, hy, hz, f2)
    println("\ndeconv(g, h) is:\n")
    for i in 1:fx
        for j in 1:fy
            for k in 1:fz
                print(" ", Int(round(f2[i, j, k])), "  ")
            end
            println()
        end
        if i < fx
            println()
        end
    end
end

testdeconv()


