
struct NonogramPuzzle
    nrows::Int
    ncols::Int
    xhints::Vector{Vector{Int}}
    yhints::Vector{Vector{Int}}
    solutions::Vector{Vector{Vector{Int}}}
end

function hintsfromcol(rowvec, col)
    hints = Vector{Int}()
    hintrun = 0
    for row in rowvec
        if row[col] != 0
            hintrun += 1
        elseif starthint != 0
            push!(hints, hintrun)
            hintrun = 0
        end
    end
    hints
end

function rowsfromhints(a, len)
    possibilities = Vector{Vector{Int}}()
    v = Vector{Int}()
    j = 1
    for (i, runlen) in enumerate(a)
        if i == 1
            v = zeros(len)
            nextstart = 1
        end
        if nextstart + runlen - 1 <= len
            v[nextstart:nextstart + runlen - 1] .= 1
            j += runlen + 1
            if i == length(a)
                push!(possibilities, v)
            end
        else
            break
        end
    end
    possibilities
end

function stackrows(ngram, pstacks, remaining)
    hints = ngram.xhints[ngram.nrows - remaining]
    newstacks = [vcat(s, r) for s in pstacks, r in rowsfromhints(hints, ngram.nrows)]
    return remaining < 2 ? newstacks : stackrows(ngram, newstacks, remaining - 1)
end

function trygrids(nonogram)
    stacks = stackrows(nonogram, Vector{Vector{Int}}(), nonogram.nrows)
    for stack in stacks
        for y in 1:nonogram.ncols
            if sum(x -> stack[x][y], 1:length(stack)) != sum(nonogram.yhints[y])
                break
            end
        end
        if all(y -> hintsfromcol(nonogram, y) = nonogram.yhints[y], 1:ncols)
            push!(nonogram.solutions, stack)
        end
    end
end

const nonogramlettertext = """
C BA CB BB F AE F A B
AB CA AE GA E C D C

F CAC ACAC CN AAA AABB EBB EAA ECCC HCCC
D D AE CD AE A DA BBB CC AAB BAA AAB DA AAB AAA BAB AAA CD BBA DA

CA BDA ACC BD CCAC CBBAC BBBBB BAABAA ABAD AABB BBH BBBD ABBAAA CCEA AACAAB BCACC ACBH DCH ADBE ADBB DBE ECE DAA DB CC
BC CAC CBAB BDD CDBDE BEBDF ADCDFA DCCFB DBCFC ABDBA BBF AAF BADB DBF AAAAD BDG CEF CBDB BBB FC

E BCB BEA BH BEK AABAF ABAC BAA BFB OD JH BADCF Q Q R AN AAN EI H G
E CB BAB AAA AAA AC BB ACC ACCA AGB AIA AJ AJ ACE AH BAF CAG DAG FAH FJ GJ ADK ABK BL CM
"""

function processtestpuzzles(txt)
    txtline2ints(s) = [[UInt8(ch - 'A') for ch in r] for r in split(s, r"\s+")]
    letterpuzzletoarray(sx, sy) = (txtline2ints(sx), txtline2ints(sy))
    puzlines = map(strip(split(txt, "\n\n")))
    for p in puzlines
        xh, yh = letterpuzzletoarray(p[1], p[2])
        nonogram = NonogramPuzzle(length(xh), length(yh), xh, yh, Vector{Vector{Vector{Int}}}())
        trygrids(nonogram)
        if length(nonogram.solutions) != 0
            println(nonogram.solutions)
        end
    end
end

#=
    "Extra example not solvable by deduction alone:".writeln;
    "B B A A\nB B A A".solve;

    "Extra example where there is no solution:".writeln;
    "B A A\nA A A".solve;
=#
