
fixeddigits = Dict(2 => [[0, 0, 2], [8, 8, 2]], 4 => [[0, 0, 0]],
    6 => [[2, 7, 0], [9, 8, 5]], 8 => [[6, 5, 7],[7, 7, 8]])
squares = Dict([i * i => 1 for i in 1:1500000])

i2dig(i) = (d = Int[]; while i > 0 i, r = divrem(i, 10); push!(d, r) end; d)
dig2i(d) = (n = 0; for i in d n = 10 * n + i end; n)

function simplegetrare(upto)
    ret = Int[]
    for i in 0:upto
        dig = i2dig(i)
        r = dig2i(dig)
        n = dig2i(reverse(dig))
        nrsum, nrdiff = n + r, n - r
        if nrdiff > 0 && haskey(squares, nrsum) && haskey(squares, nrdiff)
            push!(ret, n)
        end
    end
    ret
end


function getrare(N)
    ret = simplegetrare(20000)
    for i in 0:typemax(Int)
        basedigits = i2dig(i)
        for a in [2,4,6,8], (b, p, q) in fixeddigits[a]
            dig = [[q, p]; basedigits; [b, a]]
            r = dig2i(dig)
            n = dig2i(reverse(dig))
            nrsum, nrdiff = n + r, n - r
            if nrdiff > 0 && haskey(squares, nrsum) && haskey(squares, nrdiff)
                push!(ret, n)
                if length(ret) >= N
                    return ret
                end
            end
        end
    end
end

getrare(3)
@time println("The first 8 rare numbers are: ", getrare(8))

#=
The first 8 rare numbers are: [65, 621770, 281089082, 2022652202, 2042832002, 872546974178, 872568754178, 868591084757]
809.997884 seconds (7.56 G allocations: 437.637 GiB, 3.81% gc time)
=#

